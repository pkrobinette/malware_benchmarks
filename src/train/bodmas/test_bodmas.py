"""
Script to test trained BODMAS binary malware classifiers.


NOTES:
models = [none-2, 4-2, 16-2]
"""

import argparse
from sklearn.model_selection import train_test_split
import matplotlib.pyplot as plt
import matplotlib as mpl
import numpy as np
from keras.models import load_model
import sys
from sklearn.preprocessing import StandardScaler
import os
import seaborn as sns
from sklearn import metrics

sns.set_theme()

DATAPATH = '../../../datasets/bodmas/bodmas_class.npz'
SAVEDIR = "../../../models/bodmas/h5"
SEED = 12

np.random.seed(SEED)


def get_args():
    """
    Parse Arguments.
    """
    parser = argparse.ArgumentParser()
    parser.add_argument("-d", "--datapath", type=str, default=DATAPATH)
    parser.add_argument("--savedir", type=str, default=SAVEDIR)
    
    args = parser.parse_args()
    return args
    
def load_data(filename):
    """
    Load the data.
    """
    scaler_standard = StandardScaler()
    data = np.load(filename)
    X = data['X']  # all the feature vectors
    y = data['y']  # labels, 0 as benign, 1 as malicious
    
    scaler_standard.fit(X)
    X_scaled = scaler_standard.transform(X)
    
    return X_scaled, y

def test_classifier(X_test, y_test, args):
    #
    # Create Save directory
    #
    if os.path.exists("results") == 0:
        os.mkdir("results")
    #
    # Load Models
    #
    print("\nLoading models ...")
    bodmas_path = f"{args.savedir}/malware_bodmas_binary_scaled_"
    none_2 = load_model(bodmas_path+"32-2.h5")
    four_2 = load_model(bodmas_path+"64-2.h5")
    six10_2 = load_model(bodmas_path+"128-2.h5")

    models = [none_2, four_2, six10_2]
        
    acc = [] # accuracy
    prec = [] # precision
    rec = [] # recall
    f1 = [] # f1

    dec = 2 # decimal point values
    #
    # Evaluating the test set
    #
    for i in range(3): # num of models
        print("Testing Model: ", i)
        y_pred = models[i].predict(X_test)
        y_pred = np.argmax(y_pred, axis=1)
    
        # Accuracy
        accuracy = metrics.accuracy_score(y_test, y_pred)
        acc.append(round(accuracy, dec))
    
        # Precision
        precision = metrics.precision_score(y_test, y_pred)
        prec.append(round(precision, dec))
    
        # Recall
        recall = metrics.recall_score(y_test, y_pred)
        rec.append(round(recall, dec))
    
        # F1 Score
        f = metrics.f1_score(y_test, y_pred)
        f1.append(round(f, dec))

    # reorg for plot
    none_2_stats = [acc[0], prec[0], rec[0], f1[0]] 
    four_2_stats = [acc[1], prec[1], rec[1], f1[1]] 
    six10_2_stats = [acc[2], prec[2], rec[2], f1[2]]
    #
    # Write to Txt files
    #
    with open("results/bodmas_test_stats.txt", "w") as f:
        f.write("Model | Accuracy | Precision | Recall | F1\n")
        f.write("--------------------------------------------\n")
        for m, s in zip(["32-2", "64-2", "128-2"], [none_2_stats, four_2_stats, six10_2_stats]):
            st = ""
            for i in range(len(s)):
                st += " & " + str(s[i])
            f.write(m + st + "\n")
    print("Test results saved to: results/bodmas_test_stats.txt")
        
        
    print("\nFinished Testing!")
    
if __name__ == "__main__":
    #
    # Get and validate arguments
    #
    args = get_args()
    #
    # Generate Testing Set
    #
    print("\nLoading Data ...")
    X_scaled, y = load_data(args.datapath)
    X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=SEED) ## ADD SEED HERE
    #
    # Test
    #
    print("------- Testing ------------")
    test_classifier(X_test, y_test, args)