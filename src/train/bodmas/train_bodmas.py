"""
Script to train BODMAS binary malware classifiers and save to .h5 file for verification.


NOTES:
models = [none-2, 4-2, 16-2]
"""

import argparse
from sklearn.model_selection import train_test_split
import matplotlib.pyplot as plt
import numpy as np
import tensorflow as tf
from tensorflow.keras import layers, Model, Sequential
import numpy as np
from keras.models import load_model
import sys
from sklearn.preprocessing import StandardScaler
import os

DATAPATH = '../../../datasets/bodmas/bodmas_class.npz'
SAVEDIR = "../../../models/bodmas/h5"
MODE = "binary"
N_CLASS = 2
DENSE = 4
EPOCHS = 20
BATCH_SIZE = 128
SEED = 12

tf.random.set_seed(SEED) # Sets seed for training
np.random.seed(SEED)


def get_args():
    """
    Parse Arguments.
    """
    parser = argparse.ArgumentParser()
    parser.add_argument("-d", "--datapath", type=str, default=DATAPATH)
    parser.add_argument("-n", "--name", type=str, default = None)
    parser.add_argument("--savedir", type=str, default=SAVEDIR)
    
    # Training Parameters
    parser.add_argument("-l", "--dense", type=int, default=DENSE)
    parser.add_argument("-e", "--epochs", type=int, default=EPOCHS)
    parser.add_argument("-bs", "--batch_size", type=int, default=BATCH_SIZE)
    
    args = parser.parse_args()
    return args
    
def load_data(filename):
    """
    Load the data.
    """
    scaler_standard = StandardScaler()
    data = np.load(filename)

    X = data['X']  # all the feature vectors
    y = data['y']  # labels, 0 as benign, 1 as malicious
    
    scaler_standard.fit(X)
    X_scaled = scaler_standard.transform(X)
    
    return X_scaled, y


def create_model(input_shape, l1):
    # if just linear model
    if l1 == 0:
        model = Sequential([
            layers.InputLayer(input_shape=input_shape),
            layers.Dense(2, activation='softmax')  # 2 output classes
        ])
    # normal model
    else:
        # Create the model
        model = Sequential([
            layers.InputLayer(input_shape=input_shape),
            layers.Dense(l1, activation='relu'),
            layers.Dense(2, activation='softmax')  # 2 output classes
        ])
    
    return model

        
def train_classifier(X_train, y_train, args):
    """
    Train a family malware classifier.
    """
    #
    # Training
    #
    model = create_model(X_train.shape[1], args.dense)

    # Compile the model
    model.compile(optimizer='adam',
              loss='sparse_categorical_crossentropy',
              metrics=['accuracy'])
    # train the model
    history = model.fit(
        X_train, 
        y_train, 
        epochs=args.epochs, 
        batch_size=args.batch_size,
        validation_split=0.1
    )
    #
    # Save the model
    #
    # --> name is automatic for this network. see __main__
    model.save(f"{args.savedir}/{args.name}.h5")
    print(f"\nModel saved to: {args.savedir}/{args.name}.h5\n\n")
    
    return model

def test_classifier(model, X_test, y_test):
    #
    # Evaluate the model
    #
    score = model.evaluate(X_test, y_test, verbose=0)
    print("Final Accuracy: {}".format(score[1]))
    

# %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
# Reproduce Main Function
# %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
if __name__ == "__main__":
    #
    # Get and validate arguments
    #
    args = get_args()
    os.makedirs(args.savedir, exist_ok=True)
    # dense_sizes = [0, 4, 16]
    #
    # Generate Training Set
    #
    print("\nLoading Data ...")
    print(args.datapath)
    X_scaled, y = load_data(args.datapath)
    X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=SEED, stratify=y) ## ADD SEED HERE
    
    name = "none" if args.dense == 0 else args.dense
    args.name = f"malware_bodmas_binary_scaled_{name}-2"
    #
    # Training
    #
    print("\n-------- Training Parameters --------- ")
    print(f"NAME: {args.name}")
    print(f"DENSE: {args.dense}")
    print(f"EPOCHS: {args.epochs}")
    print(f"SEED: {SEED}")
    
    print("\n-------- Training --------- ")
    model = train_classifier(X_train, y_train, args)
    print("\n-------- Testing --------- ")
    test_classifier(model, X_test, y_test)
    
    
    
    
    
    
#     for s in dense_sizes:
#         args.dense = s
#         name = "none" if args.dense == 0 else args.dense
#         args.name = f"malware_bodmas_binary_scaled_{name}-2"
#         #
#         # Training
#         #
#         print("\n-------- Training Parameters --------- ")
#         print(f"NAME: {args.name}")
#         print(f"DENSE: {args.dense}")
#         print(f"EPOCHS: {args.epochs}")
#         print(f"SEED: {SEED}")
        
#         print("\n-------- Training --------- ")
#         train_classifier(X_train, X_test, y_train, y_test, args)
    
        
        
# %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
# General Main Function
# %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
# if __name__ == "__main__":
#     #
#     # Get and validate arguments
#     #
#     args = get_args()
#     if args.name == None:
#         name = "none" if args.dense == 0 else args.dense
#         args.name = f"malware_bodmas_binary_scaled_{name}-2"
#     #
#     # Training
#     #
#     print("\n-------- Training Parameters --------- ")
#     print(f"NAME: {args.name}")
#     print(f"DENSE: {args.dense}")
#     print(f"EPOCHS: {args.epochs}")
    
#     print("\n-------- Training --------- ")
#     train_classifier(args)
        
