"""
Script to test MALIMG family malware classifiers.


NOTES:
models = [2-25, 8-25, 32-25]
"""

import argparse
from sklearn.model_selection import train_test_split
from tensorflow.keras.preprocessing.image import ImageDataGenerator
import matplotlib.pyplot as plt
import matplotlib as mpl
import numpy as np
from keras.models import load_model
import sys
import os
import seaborn as sns
from sklearn import metrics

sns.set_theme()

DATAPATH = "../../../datasets/malimg"
SAVEDIR = "../../../models/malimg/h5"
IMSIZE = 64
SEED = 12

np.random.seed(SEED)


def get_args():
    """
    Parse Arguments.
    """
    parser = argparse.ArgumentParser()
    parser.add_argument("-d", "--datapath", type=str, default=DATAPATH)
    parser.add_argument("--savedir", type=str, default=SAVEDIR)
    
    # Training Parameters
    parser.add_argument("-s", "--imsize", type=int, default=IMSIZE)
    
    args = parser.parse_args()
    return args
    
def load_data(args):
    """
    Load malimg dataset.
    """
    #
    # Data is normalized
    #
    data_gen = ImageDataGenerator(rescale=1./255)
    batches = data_gen.flow_from_directory(directory=args.datapath, color_mode='grayscale', target_size=(args.imsize, args.imsize), batch_size=10000, seed=SEED)    #
    # Gather data from generator
    #
    imgs, labels = next(batches)
    
    return imgs, labels

def create_train_val_test_split(x, y):
    """
    Create data splits.
    """
    X_train_val, X_test, y_train_val, y_test = train_test_split(x, y, test_size=0.2, random_state=SEED, stratify=y)
    X_train, X_val, y_train, y_val = train_test_split(X_train_val, y_train_val, test_size=0.1, random_state=SEED, stratify=y_train_val)
    
    return X_train, X_val, X_test, y_train, y_val, y_test


def test_classifier(X_test, y_test, args):
    #
    # Create Save directory
    #
    if os.path.exists("results") == 0:
        os.mkdir("results")
    #
    # Load Models
    #
    print("\nLoading models ...")
    path = f"{args.savedir}/malware_malimg_family_scaled_"
    none_2 = load_model(path+"2-25.h5")
    four_2 = load_model(path+"8-25.h5")
    six10_2 = load_model(path+"32-25.h5")

    models = [none_2, four_2, six10_2]
        
    acc = []
    prec = []
    rec = []
    f1 = []
    
    dec = 2
    
    y_test_val = np.argmax(y_test, axis=1)
    
    for i in range(3): # num of models
        print("Testing Model: ", i)
        y_pred = models[i].predict(X_test)
        y_pred = np.argmax(y_pred, axis=1)
        print(y_pred.shape)
        
        # Accuracy
        accuracy = metrics.accuracy_score(y_test_val, y_pred)
        acc.append(round(accuracy, dec))
        
        # Precision
        precision = metrics.precision_score(y_test_val, y_pred, average=None)
        precision = np.mean(precision)
        prec.append(round(precision, dec))
        
        # Recall
        recall = metrics.recall_score(y_test_val, y_pred, average=None)
        recall = np.mean(recall)
        rec.append(round(recall, dec))
        
        # F1 Score
        f = metrics.f1_score(y_test_val, y_pred, average=None)
        f = np.mean(f)
        f1.append(round(f, dec))
    
    # reorg for plot
    none_2_stats = [acc[0], prec[0], rec[0], f1[0]] 
    four_2_stats = [acc[1], prec[1], rec[1], f1[1]] 
    six10_2_stats = [acc[2], prec[2], rec[2], f1[2]] 
    #
    # Write to Txt files
    #
    with open("results/malimg_test_stats.txt", "w") as f:
        f.write("Model | Accuracy | Precision | Recall | F1\n")
        f.write("--------------------------------------------\n")
        for m, s in zip(["2-25", "8-25", "32-25"], [none_2_stats, four_2_stats, six10_2_stats]):
            st = ""
            for i in range(len(s)):
                st += " & " + str(s[i])
            f.write(m + st + "\n")
    print("Test results saved to: results/malimg_test_stats.txt")
    
if __name__ == "__main__":
    #
    # Get and validate arguments
    #
    args = get_args()
    #
    # Generate Testing Set
    #
    print("\nLoading Data ...")
    imgs, labels= load_data(args)
    X_train, X_val, X_test, y_train, y_val, y_test = create_train_val_test_split(imgs, labels)
    #
    # Test
    #
    print("------- Testing ------------")
    test_classifier(X_test, y_test, args)