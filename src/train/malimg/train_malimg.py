"""
Script to train Malimg image malware classifiers and save to .h5 file for verification.

NOTES:
models = [linear-2, 4-2, 16-2]

"""

import tensorflow as tf
from tensorflow.keras import layers, Model, Sequential
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.models import load_model
from sklearn.model_selection import train_test_split

import argparse
import numpy as np
import sys
import matplotlib.pyplot as plt

DATAPATH = "../../../datasets/malimg"
SAVEDIR = "../../../models/malimg/h5"
CONV1 = 32
IMSIZE = 64
EPOCHS = 10
N_CLASS = 25
BATCH_SIZE = 64
SEED = 12

tf.random.set_seed(SEED) # Sets seed for training
np.random.seed(SEED)


def get_args():
    """
    Parse Arguments.
    """
    parser = argparse.ArgumentParser()
    parser.add_argument("-c", "--classes", type=int, default=N_CLASS, help="total number of class for nullclass mode.")
    parser.add_argument("-d", "--datapath", type=str, default=DATAPATH)
    parser.add_argument("-n", "--name", type=str, default = None)
    parser.add_argument("--savedir", type=str, default=SAVEDIR)
    
    # Training Parameters
    parser.add_argument("-s", "--imsize", type=int, default=IMSIZE)
    parser.add_argument("-c1", "--conv1", type=int, default=CONV1)
    parser.add_argument("-e", "--epochs", type=int, default=EPOCHS)
    parser.add_argument("-bs", "--batch_size", type=int, default=BATCH_SIZE)
    
    args = parser.parse_args()
    return args

def load_data(args):
    """
    Load malimg dataset.
    """
    #
    # Data is normalized
    #
    data_gen = ImageDataGenerator(rescale=1./255)
    batches = data_gen.flow_from_directory(directory=args.datapath, color_mode='grayscale', target_size=(args.imsize, args.imsize), batch_size=10000, seed=SEED)
    #
    # Gather data from generator
    #
    imgs, labels = next(batches)
    
    return imgs, labels

def create_train_val_test_split(x, y):
    """
    Create data splits.
    """
    X_train_val, X_test, y_train_val, y_test = train_test_split(x, y, test_size=0.2, random_state=SEED, stratify=y)
    X_train, X_val, y_train, y_val = train_test_split(X_train_val, y_train_val, test_size=0.1, random_state=SEED, stratify=y_train_val)
    
    return X_train, X_val, X_test, y_train, y_val, y_test

def create_cnn(im_size=64, channels=1, conv1=4, num_classes=25):
    """
    cnn family classification.
    """
    if conv1 == 0:
        model = Sequential([
            layers.InputLayer(input_shape=(im_size, im_size, channels)),
            layers.Flatten(),
            layers.Dense(num_classes, activation='softmax')
        ])
    else:
        
        model = Sequential([
            layers.Conv2D(conv1, kernel_size=(3, 3), activation='relu', input_shape=(im_size, im_size, channels)),
            layers.Flatten(),
            layers.Dense(num_classes, activation='softmax')
        ])
        
    return model
        
        
def train_family_classifier(X_train, X_val, y_train, y_val, args):
    """
    Train a family malware classifier.
    """
    #
    # Training
    #
    channels = X_train[0].shape[2]
    model = create_cnn(args.imsize, channels, args.conv1, args.classes)
    
    model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])
    
    model.fit(X_train, y_train, epochs=args.epochs, batch_size=args.batch_size, validation_data=(X_val, y_val))
    #
    # Save the model
    #
    model.save(f"{args.savedir}/{args.name}.h5")
    print(f"\nModel saved to: {args.savedir}/{args.name}.h5\n\n")
    
    return model

    
def test_family_classifier(model, X_test, y_test):
    """
    Test a family malware classifier.
    """    
    #
    # Evaluate the model
    #
    score = model.evaluate(X_test, y_test, verbose=0)
    print("Final Accuracy: {}".format(score[1]))
    
    
    
# %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
# Reproduce Main Function
# %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%   
if __name__ == "__main__":
    #
    # Get and validate arguments
    #
    args = get_args()
    os.makedirs(args.savedir, exist_ok=True)
    convs_sizes = [2, 8, 32]
    #
    # Generate Training Set
    #
    print("\nLoading Data ...")
    imgs, labels = load_data(args)
    X_train, X_val, X_test, y_train, y_val, y_test = create_train_val_test_split(imgs, labels)
    print(X_train.shape)
    #
    # 
    #
    for s in convs_sizes:
        args.conv1 = s
        name = "linear" if args.conv1 == 0 else args.conv1
        args.name = f"malware_malimg_family_scaled_{name}-25"
        #
        # Training
        #
        print("\n-------- Training Parameters --------- ")
        print(f"NAME: {args.name}")
        print(f"IMSIZE: {args.imsize}")
        print(f"CONV1: {args.conv1}")
        print(f"EPOCHS: {args.epochs}")
        print(f"SEED: {SEED}")
        
        print("\n-------- Training --------- ")
        model = train_family_classifier(X_train, X_val, y_train, y_val, args)
        print("\n-------- Testing --------- ")
        test_family_classifier(model, X_test, y_test)
        
    
    
# %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
# General Main Function
# %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%            
# if __name__ == "__main__":
#     #
#     # Get and validate arguments
#     #
#     args = get_args()
#     if args.name == None:
#         name = "none" if args.conv1 == 0 else args.conv1
#         args.name = f"malware_malimg_family_scaled_{name}-25"    #
#     # Training
#     #
#     print("\n-------- Training Parameters --------- ")
#     print(f"NORMALIZE: {not args.no_normalize}")
#     print(f"NAME: {args.name}")
#     print(f"IMSIZE: {args.imsize}")
#     print(f"CONV1: {args.conv1}")
#     print(f"EPOCHS: {args.epochs}")
    
#     print("\n-------- Training --------- ")

#     # train_family_classifier(args)

        
